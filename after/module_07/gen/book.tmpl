{{ $handler := ( print .Name "Handler" ) }}
{{ $lowerName:= ( toLower .Name ) }}
{{ $plural:= ( print .Name "s" ) }}
{{ $lowerPlural:= ( toLower $plural ) }}

// DO NOT GENERATED FILE

package main

import (
  "fmt"
  "html/template"
  "net/http"
  "strconv"
  "time"

  "github.com/gorilla/mux"
)

type {{ .Name }} struct {
  ID int
  {{ range .Fields -}}
  {{ .Name }} {{ .Type }}
  {{ end -}}
  Timestamp time.Time
}

type {{ $handler }} struct {
  tmpl  *template.Template
  repo  *Repo
}

func New{{ $handler }}(repo *Repo, tmpl *template.Template) (h *{{ $handler }}, err error) {
  createSQL := `CREATE TABLE IF NOT EXISTS {{ $plural }} ( 
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                {{ range .Fields -}} 
                {{ .Name | toLower }} {{ .DB }}, 
                {{ end -}}
                timestamp DATETIME NOT NULL
                )`

  if _, err := repo.Exec(createSQL); err != nil {
    return nil, err
  }

  h = &{{ $handler }}{
    tmpl: tmpl,
    repo: repo,
  }

  return h, nil
}

func (h *{{ $handler }}) RegisterHandlers(rtr *mux.Router) {
  rtr.HandleFunc("/{{ $lowerPlural }}", h.get{{ $plural }}).Methods("GET")
  rtr.HandleFunc("/{{ $lowerPlural }}/{id}", h.get{{ .Name }}).Methods("GET")
  rtr.HandleFunc("/{{ $lowerPlural }}/{id}", h.submit{{ .Name }}).Methods("POST")
}

func (h *{{ $handler }}) get{{ $plural}}(w http.ResponseWriter, r *http.Request) {
  rows, err := h.repo.Query("SELECT * FROM {{ $plural }} ORDER BY id ASC")
  if err != nil {
    panic(err)
  }
  defer rows.Close()

  {{ $lowerPlural }} := []{{ .Name }}{}
  for rows.Next() {
    {{ $lowerName }} := {{ .Name }}{}

    err = rows.Scan(&{{ $lowerName }}.ID, {{ range .Fields -}} &{{ $lowerName }}.{{ .Name }}, {{ end -}} &{{ $lowerName }}.Timestamp)
    if err != nil {
      panic(err)
    }

    {{ $lowerPlural }} = append({{ $lowerPlural }}, {{ $lowerName }})
  }

  h.tmpl.ExecuteTemplate(w, "{{ $lowerPlural }}.html", {{ $lowerPlural }})
}

func (h *{{ $handler }}) get{{ .Name }}(w http.ResponseWriter, r *http.Request) {
  vars := mux.Vars(r)
  id, _ := strconv.Atoi(vars["id"])

  if id == 0 {
    h.tmpl.ExecuteTemplate(w, "{{ $lowerName }}.html", &{{ .Name }}{})
  } else {
    row := h.repo.QueryRow("SELECT * FROM {{ $plural }} WHERE (id = ?)", id)

    {{ $lowerName }} := &{{ .Name }}{}

    err := row.Scan(&{{ $lowerName }}.ID, {{ range .Fields -}} &{{ $lowerName }}.{{ .Name }}, {{ end -}} &{{ $lowerName }}.Timestamp)
    if err != nil{
      w.WriteHeader(http.StatusNotFound)
      fmt.Fprint(w, "{{ .Name }} not Found")
    } else {
      h.tmpl.ExecuteTemplate(w, "{{ $lowerName }}.html", {{ $lowerName }})
    }
  }
}

func (h *{{ $handler }}) submit{{ .Name }}(w http.ResponseWriter, r *http.Request) {
  r.ParseForm()

  vars := mux.Vars(r)
  id, _ := strconv.Atoi(vars["id"])

  {{ range .Fields -}}
  {{ .Name | toLower }} := r.Form.Get("{{ .Name | toLower }}")
  {{ end }}


  if id == 0 {
    execSQL := "INSERT INTO {{ $plural }} VALUES (NULL, {{ range .Fields -}} ?, {{ end -}} ?);"
    _, err := h.repo.Exec(execSQL, {{ range .Fields -}} {{ .Name | toLower }}, {{ end -}} time.Now())
    if err != nil {
      panic(err)
    }
  } else {
    execSQL := "UPDATE {{ $plural }} SET {{ range .Fields -}} {{ .Name | toLower }} = ?, {{ end -}} timestamp = ? WHERE (id = ?);"
    _, err := h.repo.Exec(execSQL, {{ range .Fields -}} {{ .Name | toLower }}, {{ end -}} time.Now(), id)
    if err != nil {
      panic(err)
    }
  }

  http.Redirect(w, r, "/{{ $lowerPlural }}", http.StatusSeeOther)
}
