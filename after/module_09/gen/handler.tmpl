// DO NOT EDIT GENERATED FILE

 {{ $handler := ( print .Name "Handler" ) }}
 {{ $lowerName := ( toLower .Name ) }}
 {{ $plural := ( print .Name "s" ) }}
 {{ $lowerPlural := ( toLower $plural ) }}

package main

import (
  "fmt"
  "html/template"
  {{ if ( eq .Name "Book" ) }}
  "math/rand"
  {{ end }}
  "net/http"
  "strconv"
  "time"

  "github.com/gorilla/mux"
)

type {{ .Name }} struct {
  ID int
  {{ range .Fields -}}
      {{ .Name }} {{ .Type }}
  {{ end -}}
  {{ if ( eq .Name "Book" ) -}}
  Stock int
  {{ end -}}
  Timestamp time.Time
}

type {{ $handler }} struct {
  tmpl  *template.Template
  repo *Repo
}

func New{{ $handler }}(repo *Repo, tmpl *template.Template) (h *{{ $handler }}, err error) {
  createSQL := `CREATE TABLE IF NOT EXISTS {{ $plural }} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                {{ range .Fields -}}
                    {{ .Name | toLower }} {{ .DB }},
                {{ end -}}
                timestamp DATETIME NOT NULL
                )`

  if _, err := repo.Exec(createSQL); err != nil {
    return nil, err
  }
  
  h = &{{ $handler }} {
    tmpl: tmpl,
    repo: repo,
  }

  return h, nil
}

func (h *{{ $handler }}) RegisterHandlers(rtr *mux.Router) {
  rtr.HandleFunc("/{{ $lowerPlural }}", h.get{{ $plural }}).Methods("GET")
  rtr.HandleFunc("/{{ $lowerPlural }}/{id}", h.get{{ .Name }}).Methods("GET")
  rtr.HandleFunc("/{{ $lowerPlural }}/{id}", h.submit{{ .Name }}).Methods("POST")
}

func (h *{{ $handler }}) get{{ $plural }}(w http.ResponseWriter, r *http.Request) {
  {{ if ( eq .Name "Review" ) -}}
    vals := r.URL.Query()
    bookID, _ := strconv.Atoi(vals["bookid"][0])
  {{ end }}
  
  {{ if ( eq .Name "Review" ) -}}
    rows, err := h.repo.Query("SELECT * FROM {{ $plural }} WHERE (bookid = ?) ORDER BY ID ASC", bookID)
  {{ else }}
    rows, err := h.repo.Query("SELECT * FROM {{ $plural }} ORDER BY ID ASC")
  {{ end }}
  if err != nil {
    panic(err)
  }
  defer rows.Close()

  {{ $lowerPlural }} := []{{ .Name }}{}
  for rows.Next() {
    {{ $lowerName }} := {{ .Name }}{}

    err = rows.Scan(&{{ $lowerName }}.ID, {{ range .Fields -}} &{{ $lowerName }}.{{ .Name }}, {{ end -}} &{{ $lowerName }}.Timestamp)
    if err != nil {
      panic(err)
    }

    {{ $lowerPlural }} = append({{ $lowerPlural }}, {{ $lowerName }})
  }

  h.tmpl.ExecuteTemplate(w, "{{ $lowerPlural }}.html", {{ $lowerPlural }})
}

func (h *{{ $handler }}) get{{ .Name }}(w http.ResponseWriter, r *http.Request) {
  vars := mux.Vars(r)
  id, _ := strconv.Atoi(vars["id"])

  {{ if ( eq .Name "Review" ) -}}
      vals := r.URL.Query()
      bookID, _ := strconv.Atoi(vals["bookid"][0])
  {{ end }}

  if id == 0 {
    {{ $lowerName }} := &{{ .Name }}{}

    {{ if ( eq .Name "Review" ) -}}
      {{ $lowerName }}.BookID = bookID
    {{ end -}}

    h.tmpl.ExecuteTemplate(w, "{{ $lowerName }}.html", &{{ $lowerName }})
    } else {
      row := h.repo.QueryRow("SELECT * FROM {{ $plural }} WHERE (id = ?)", id)

      {{ $lowerName }} := &{{ .Name }}{}

      err := row.Scan(&{{ $lowerName }}.ID, {{ range .Fields -}} &{{ $lowerName }}.{{ .Name }}, {{ end -}} &{{ $lowerName }}.Timestamp)
      if err != nil {
        w.WriteHeader(http.StatusNotFound)
        fmt.Fprint(w, "{{ .Name }} not Found")
      } else {
        {{ if ( eq .Name "Book" ) }}
        {{ $lowerName }}.Stock = rand.Intn(5)
        {{ end }}
        h.tmpl.ExecuteTemplate(w, "{{ $lowerName }}.html", {{ $lowerName }})
      }
    }
}

func (h *{{ $handler }}) submit{{ .Name }}(w http.ResponseWriter, r *http.Request) {
  r.ParseForm()

  vars := mux.Vars(r)
  id, _ := strconv.Atoi(vars["id"])
  {{ range .Fields -}}
      {{ if ( eq .Type "int" ) -}}
      {{ .Name | toLower }}, _ := strconv.Atoi(r.Form.Get("{{ .Name |
      toLower }}"))
      {{ else -}}
      {{ .Name | toLower }} := r.Form.Get("{{ .Name | toLower }}")
      {{ end -}}
  {{ end }}

  if id == 0 {

    execSQL := "INSERT INTO {{ $plural }} VALUES (NULL, {{ range .Fields -}} ?, {{ end -}} ?);"

    _, err := h.repo.Exec(execSQL, {{ range .Fields -}} {{ .Name | toLower }}, {{ end -}} time.Now())
    if err != nil {
      panic(err)
    }

  } else {

    execSQL := "UPDATE {{ $plural }} SET {{ range .Fields -}} {{ .Name | toLower }} = ?, {{ end -}} timestamp = ? WHERE (id = ?);"

    _, err := h.repo.Exec(execSQL, {{ range .Fields -}} {{ .Name | toLower }}, {{ end -}} time.Now(), id)
    if err != nil {
      panic(err)
    }

  }

  {{ if ( eq .Name "Review" ) }}
  http.Redirect(w, r, fmt.Sprintf("/{{ $lowerPlural }}?bookid=%d", bookid), http.StatusSeeOther)
  {{ else }}
  http.Redirect(w, r, "/{{ $lowerPlural }}", http.StatusSeeOther)
  {{ end }}
}





